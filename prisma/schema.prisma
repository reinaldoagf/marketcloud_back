// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//
enum PurchaseStatus {
  pendiente
  pagado
  caducado
}

enum UserStatus {
  activo
  inactivo
}

enum ProductPacking {
  botella
  bolsa
  caja
  paquete
}

enum UnitMeasurement {
  litros
  gramos
}

enum PriceCalculation {
  presentacion
  cantidad
  unidadDeMedida
}

enum ProductStatus {
  activo
  inactivo
  revisar
}

enum PermissionType {
  vista
  actualizar
  eliminar
}

//
// MODELOS
//

model Role {
  id           String            @id @default(uuid())
  key          String            @unique
  name         String
  users        User[]
  permissions  RolePermission[]
  pages        RolePage[]
  createdAt    DateTime          @default(now())
}

model Permission {
  id           String            @id @default(uuid())
  type         PermissionType    @unique
  roles        RolePermission[]
  createdAt    DateTime          @default(now())
}

// tabla puente Role ↔ Permission
model RolePermission {
  roleId       String
  permissionId String
  role         Role            @relation(fields: [roleId], references: [id])
  permission   Permission      @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

// tabla para páginas de un rol
model RolePage {
  id         String    @id @default(uuid())
  page       String
  roleId     String
  role       Role      @relation(fields: [roleId], references: [id])
  createdAt  DateTime  @default(now())
}

model User {
  id                    String          @id @default(uuid())
  avatar                String?
  name                  String
  email                 String          @unique
  username              String          @unique
  dni                   String?         @unique
  dniFile               String?
  password              String    
  status                UserStatus      @default(activo)
  hasAllPermissions     Boolean         @default(false)

  roleId                String?
  role                  Role?           @relation(fields: [roleId], references: [id])

  country               String          @default("venezuela")
  state                 String
  city                  String

  businessId            String?
  // Relación opcional con Business
  business              Business?       @relation("BusinessOwner")

  // relaciones
  createdPendings       Pending[]       @relation("CreatedBy")
  linkedPendings        Pending[]       @relation("LinkedUser")

  collaborations        BusinessBranchCollaborator[]
  clients               BusinessBranchClient[]
  suppliers             BusinessBranchSupplier[]
  purchases             BusinessBranchPurchase[]
  settings              Setting[]
  createdAt             DateTime        @default(now())
}

model ProductBrand {
  id        String    @id @default(uuid())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
}

model ProductCategory {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  products  Product[]
}

model Product {
  id                     String                @id @default(uuid())
  name                   String
  status                 ProductStatus         @default(activo)
  unitMeasurement        UnitMeasurement?      @default(gramos)
  priceCalculation       PriceCalculation?     @default(presentacion)
  categoryId             String?
  category               ProductCategory?      @relation(fields: [categoryId], references: [id])
  brandId                String?
  brand                  ProductBrand?         @relation(fields: [brandId], references: [id])
  businessId             String?
  business               Business?             @relation(fields: [businessId], references: [id])
  presentations          ProductPresentation[]
  stocks                 ProductStock[]
  tags                   ProductTag[]
  purchases              Purchase[]
  createdAt              DateTime              @default(now())
}

model ProductPresentation {
  id                     String   @id @default(uuid())
  flavor                 String?
  measurementQuantity    Float
  packing                ProductPacking  @default(bolsa)
  stocks                 ProductStock[]
  purchases              Purchase[]
  productId              String?
  product                Product?        @relation(fields: [productId], references: [id])
  createdAt              DateTime        @default(now())
}

// tabla para tags de productos
model ProductTag {
  id                     String          @id @default(uuid())
  tag                    String
  productId              String
  product                Product         @relation(fields: [productId], references: [id])
  createdAt              DateTime        @default(now())
}

model ProductStock {
  id                     String                @id @default(uuid())
  units                  Int                   @default(0)
  priceByUnit            Float?                @default(0.0)
  availableQuantity      Float?                @default(0.0)
  priceByMeasurement     Float?                @default(0.0)
  quantityPerMeasure     Float?                @default(0.0)
  totalSellingPrice      Float                 @default(0.0)
  purchasePricePerUnit   Float                 @default(0.0)
  profitPercentage       Float                 @default(0.0)
  returnOnInvestment     Float                 @default(0.0)
  productPresentationId  String?
  productPresentation    ProductPresentation?  @relation(fields: [productPresentationId], references: [id])
  productId              String
  product                Product?              @relation(fields: [productId], references: [id])
  branchId               String
  branch                 BusinessBranch        @relation(fields: [branchId], references: [id])
  createdAt              DateTime              @default(now())
  
  @@unique([productId, branchId, productPresentationId])
}

model Pending {
  id            String         @id @default(uuid())
  title         String
  message       String
  eventDate     DateTime?
  businessId    String
  business      Business       @relation(fields: [businessId], references: [id])
  branchId      String
  branch        BusinessBranch @relation(fields: [branchId], references: [id])
  createdById   String?
  createdBy     User?          @relation("CreatedBy", fields: [createdById], references: [id])
  linkedUserId  String?
  linkedUser    User?          @relation("LinkedUser", fields: [linkedUserId], references: [id])
  createdAt     DateTime       @default(now())
}

model SubscriptionPlan {
  id                 String        @id @default(uuid())
  title              String
  price              Float
  quantityProducts   Int?
  quantityBranches   Int?
  proFunctions       Boolean
  createdAt          DateTime      @default(now())
  businesses         Business[]
}

model Business {
  id                        String   @id @default(uuid())
  rif                       String?
  logo                      String?
  ownerId                   String   @unique
  owner                     User     @relation("BusinessOwner", fields: [ownerId], references: [id])
  name                      String
  description               String
  branches                  BusinessBranch[]
  subscriptionPlanId        String?
  subscriptionPlan          SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionDate          DateTime
  expirationDate            DateTime
  purchases                 BusinessBranchPurchase[]
  pendings                  Pending[]
  products                  Product[]
  settings                  Setting[]
  // relación 1:N con usuarios (empleados/miembros)
  /* users User[] @relation("BusinessUsers") */
  createdAt                 DateTime         @default(now())
}

model BusinessBranch {
  id            String    @id @default(uuid())
  businessId    String?
  business      Business? @relation(fields: [businessId], references: [id])
  country       String    @default("venezuela")
  state         String
  city          String
  address       String
  phone         String
  stocks        ProductStock[]
  collaborators BusinessBranchCollaborator[]
  clients       BusinessBranchClient[]
  suppliers     BusinessBranchSupplier[]
  pendings      Pending[]
  purchases     BusinessBranchPurchase[]
  settings      Setting[]
  createdAt     DateTime  @default(now())
}

model BusinessBranchCollaborator {
  id        String         @id @default(uuid())
  userId    String
  branchId  String
  user      User           @relation(fields: [userId], references: [id])
  branch    BusinessBranch @relation(fields: [branchId], references: [id])
  isAdmin   Boolean        @default(false)
  createdAt DateTime       @default(now())
}

model BusinessBranchClient {
  id        String         @id @default(uuid())
  userId    String
  branchId  String
  user      User           @relation(fields: [userId], references: [id])
  branch    BusinessBranch @relation(fields: [branchId], references: [id])
  createdAt DateTime       @default(now())
}

model BusinessBranchSupplier {
  id        String         @id @default(uuid())
  userId    String
  branchId  String
  user      User           @relation(fields: [userId], references: [id])
  branch    BusinessBranch @relation(fields: [branchId], references: [id])
  createdAt DateTime       @default(now())
}

model Purchase {
  id                         String                  @id @default(uuid())
  businessBranchPurchaseId   String
  businessBranchPurchase     BusinessBranchPurchase  @relation(fields: [businessBranchPurchaseId], references: [id])
  productId                  String
  product                    Product                 @relation(fields: [productId], references: [id])
  productPresentationId      String?
  productPresentation        ProductPresentation?    @relation(fields: [productPresentationId], references: [id])
  unitsOrMeasures            Float                   @default(1.0)
  price                      Float                   @default(0.0)
  createdAt                  DateTime                @default(now())
}

model BusinessBranchPurchase {
  id               String   @id @default(uuid())
  clientName       String?
  clientDNI        String?
  businessRif      String?
  userId           String?
  user             User?          @relation(fields: [userId], references: [id])
  businessId       String?
  business         Business?      @relation(fields: [businessId], references: [id])
  branchId         String
  branch           BusinessBranch @relation(fields: [branchId], references: [id])
  amountCancelled  Float
  totalAmount      Float
  expiredDate      DateTime?      //@default(dbgenerated("NOW() + INTERVAL 15 DAY"))
  status           PurchaseStatus @default(pendiente)
  purchases        Purchase[]
  createdAt        DateTime       @default(now())
}

model Setting {
  id               String          @id @default(uuid())
  key              String          @unique
  floatValue       Float?
  stringValue      String?
  userId           String?
  user             User?           @relation(fields: [userId], references: [id])
  businessId       String?
  business         Business?       @relation(fields: [businessId], references: [id])
  branchId         String?
  branch           BusinessBranch? @relation(fields: [branchId], references: [id])
  createdAt        DateTime        @default(now())
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//
enum PurchaseStatus {
  pending
  paid
  expired
}

enum UserStatus {
  active
  inactive
}

enum UnitMeasurement {
  liters
  kilograms
}

enum ProductStatus {
  active
  inactive
  review
}

enum PermissionType {
  view
  delete
  update
}

//
// MODELOS
//
model Purchase {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  businessId Int
  business   Business  @relation(fields: [businessId], references: [id])
  amount     Float
  status     PurchaseStatus
}

model Role {
  id          Int          @id @default(autoincrement())
  key         String       @unique
  name        String
  createdAt   DateTime     @default(now())
  users       User[]
  permissions RolePermission[]
  pages       RolePage[]
}

model Permission {
  id    Int              @id @default(autoincrement())
  type  PermissionType
  roles RolePermission[]
}

// tabla puente Role ↔ Permission
model RolePermission {
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

// tabla para páginas de un rol
model RolePage {
  id     Int   @id @default(autoincrement())
  page   String
  roleId Int
  role   Role  @relation(fields: [roleId], references: [id])
}

model User {
  id        Int             @id @default(autoincrement())
  avatar    String?
  name      String
  email     String          @unique
  username  String          @unique
  dni       String?         @unique
  password  String    
  status    UserStatus      @default(active)
  createdAt DateTime        @default(now())

  roleId    Int?
  role      Role?           @relation(fields: [roleId], references: [id])

  country       String      @default("venezuela")
  state         String
  city          String

  businessId Int?
  // Relación opcional con Business
  business Business?        @relation("BusinessOwner")

  // relaciones
  createdPendings Pending[] @relation("CreatedBy")
  linkedPendings  Pending[] @relation("LinkedUser")

  collaborations  BusinessBranchCollaborator[]
  clients         BusinessBranchClient[]
  suppliers       BusinessBranchSupplier[]
  purchases       BusinessBranchPurchase[]
}

model ProductBrand {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  products  Product[]
}

model ProductCategory {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  products  Product[]
}

model Product {
  id              Int                  @id @default(autoincrement())
  name            String
  itHasFlavor     Boolean? 
  unitMeasurement UnitMeasurement?
  categoryId      Int?
  category        ProductCategory?     @relation(fields: [categoryId], references: [id])
  brandId         Int?
  brand           ProductBrand?        @relation(fields: [brandId], references: [id])
  presentations   ProductPresentation[]
  status          ProductStatus        @default(active)
  createdAt       DateTime             @default(now())
  tags            ProductTag[]
}

model ProductPresentation {
  id                   Int       @id @default(autoincrement())
  productId            Int?
  product              Product?  @relation(fields: [productId], references: [id])
  flavor               String?
  description          String?
  measurementQuantity  Float
  quantity             Int?
  createdAt            DateTime  @default(now())
}

// tabla para tags de productos
model ProductTag {
  id        Int     @id @default(autoincrement())
  tag       String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Pending {
  id            Int       @id @default(autoincrement())
  title         String
  message       String
  eventDate     DateTime?
  businessId    Int
  business      Business @relation(fields: [businessId], references: [id])
  branchId      Int
  branch        BusinessBranch @relation(fields: [branchId], references: [id])
  createdById   Int?
  createdBy     User?     @relation("CreatedBy", fields: [createdById], references: [id])
  linkedUserId  Int?
  linkedUser    User?    @relation("LinkedUser", fields: [linkedUserId], references: [id])
  createdAt     DateTime  @default(now())
}

model SubscriptionPlan {
  id                 Int       @id @default(autoincrement())
  title              String
  price              Float
  quantityProducts   Int?
  quantityBranches   Int?
  proFunctions      Boolean
  createdAt          DateTime  @default(now())
  businesses         Business[]
}

model Business {
  id                        Int              @id @default(autoincrement())
  rif                       String?
  logo                      String?
  // Clave foránea hacia User
  ownerId                   Int   @unique
  owner                     User  @relation("BusinessOwner", fields: [ownerId], references: [id])
  name                      String
  description               String
  branches                  BusinessBranch[]
  subscriptionPlanId        Int?
  subscriptionPlan          SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionDate          DateTime
  expirationDate            DateTime
  createdAt                 DateTime         @default(now())
  purchases                 Purchase[]
  pendings                  Pending[]

  // relación 1:N con usuarios (empleados/miembros)
  /* users User[] @relation("BusinessUsers") */
}

model BusinessBranch {
  id            Int       @id @default(autoincrement())
  businessId    Int?
  business      Business? @relation(fields: [businessId], references: [id])
  country       String    @default("venezuela")
  state         String
  city          String
  address       String
  phone         String
  createdAt     DateTime  @default(now())
  collaborators BusinessBranchCollaborator[]
  clients       BusinessBranchClient[]
  suppliers     BusinessBranchSupplier[]
  pendings      Pending[]
}

model BusinessBranchCollaborator {
  id        Int           @id @default(autoincrement())
  userId    Int
  branchId  Int
  user      User           @relation(fields: [userId], references: [id])
  branch    BusinessBranch @relation(fields: [branchId], references: [id])
  isAdmin   Boolean        @default(false)
  createdAt DateTime       @default(now())
}

model BusinessBranchClient {
  id        Int           @id @default(autoincrement())
  userId    Int
  branchId  Int
  user      User           @relation(fields: [userId], references: [id])
  branch    BusinessBranch @relation(fields: [branchId], references: [id])
  createdAt DateTime       @default(now())
}

model BusinessBranchSupplier {
  id        Int           @id @default(autoincrement())
  userId    Int
  branchId  Int
  user      User           @relation(fields: [userId], references: [id])
  branch    BusinessBranch @relation(fields: [branchId], references: [id])
  createdAt DateTime       @default(now())
}

model BusinessBranchPurchase {
  id        Int       @id @default(autoincrement())
  userId    Int?
  user      User?     @relation(fields: [userId], references: [id])
  clientName String?
  clientCi   String?
  amount    Float
  status    PurchaseStatus
  createdAt DateTime  @default(now())
}